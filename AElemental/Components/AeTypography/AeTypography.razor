@inherits HtmlElement
@namespace AElemental.Components

@if (Variant == "h1")
{
    <h1 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle" >@ChildContent</h1>
}
else if (Variant == "h2")
{
    <h2 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</h2>
}
else if (Variant == "h3")
{
    <h3 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</h3>
}
else if (Variant == "h4")
{
    <h4 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</h4>
}
else if (Variant == "h5")
{
    <h5 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</h5>
}
else if (Variant == "h6")
{
    <h6 style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</h6>
}
else if (Variant == "p")
{
    <p style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</p>
}
else if (Variant == "a")
{
    <a style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</a>
}
else
{
    <div style="@_style" class="@_classname" @attributes="@InputAttributesWithoutClassOrStyle">@ChildContent</div>
}

@code {

    [Parameter]
    public string Variant { get; set; } = "div";

    private string? _classname;
    private string? _style;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        _style = new AeStyleBuilder()
            .AddStyle("font-family", "var(--body-font)")
            .AddStyleFromAttributes(InputAttributes)
            .NullIfEmpty();  
        
        _classname = new AeCssBuilder()
            .SetPrefix("ae-")
            .AddClass(Variant)
            .AddClassFromAttributes(InputAttributes)
            .NullIfEmpty();
    }
}
