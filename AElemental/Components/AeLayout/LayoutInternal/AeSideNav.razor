@namespace AElemental.Components
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<AeSideNav> logger

<div class="@_sideNavClassname">
    <div class="top">
        <div class="ae sidenav-logo">
            @Brand
        </div>
        <div class="ae sidenav-container">
            <div class="ae sidenav-main-menu">
                @foreach (var link in Links)
                {
                    @if (link.Enable)
                    {
                        <AeSideNavItem Link="link" Main />
                    }
                }
                @if (BottomLinks?.First(l => l.Enable) != null)
                {
                    <AeSideNavItem Link="BottomLinks.First(l => l.Enable)" style="margin-top:auto;" Main />
                }
                @foreach (var link in BottomLinks?.Except(new List<AeNavLink> { BottomLinks?.First(l => l.Enable) }) ?? new List<AeNavLink>())
                {
                    @if (link.Enable)
                    {
                        <AeSideNavItem Link="link" Main />
                    }
                }
            </div>
            <div class="ae sidenav-sub-menu">
                @foreach (var link in Links.Union(BottomLinks ?? new List<AeNavLink>()))
                {
                    <div class="ae sidenav-sub-group-wrapper" data-nav-href="@link.To">
                        <a class="ae sidenav-sub-group-title" href="@link.To">@(link.Title ?? link.Label)</a>
                        @foreach (var subLink in link.ChildLinks)
                        {
                            @if (subLink.Enable)
                            {
                                <AeSideNavItem Link="subLink" />
                                <div class="ae sidenav-sub-sub-group-wrapper" data-nav-href="@subLink.To">
                                    @foreach (var subSubLink in subLink.ChildLinks)
                                    {
                                        @if (subSubLink.Enable)
                                        {
                                            <AeSideNavItem Link="subSubLink" />
                                        }
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@functions {
    [Parameter]
    public RenderFragment Brand { get; set; }

    [Parameter]
    public List<AeNavLink> Links { get; set; } = new();

    [Parameter]
    public List<AeNavLink> BottomLinks { get; set; }
    [Parameter]
    public int SidebarExpandThreshold { get; set; } = 1400;
    [Parameter]
    public int SidebarShrunkThreshold { get; set; } = 1400;

    [Parameter]
    public bool StayCollapse { get; set; } = false;

    private string _sideNavClassname => $"ae sidenav";
    private Dictionary<string, object> _attributes;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeAsync<string>("sidenav.initializeSidenav", firstRender, SidebarExpandThreshold, SidebarShrunkThreshold, StayCollapse);
            }
            catch (Exception ex)
            {
                logger.LogCritical(ex, "Cannot initialize AElemental javascript - please validate aebundle.js configuration in _host.html");
            }
        }
        await UpdateSidenav();
        

    }

    private async Task UpdateSidenav()
    {
        try
        {
            await JSRuntime.InvokeAsync<string>("sidenav.updateNav");
        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, "Cannot update sidenav from AElemental javascript - please validate aebundle.js configuration in _host.html");
        }    
    }

    private async Task ToggleExpansion()
    {
        await JSRuntime.InvokeAsync<string>("sidenav.toggleExpansion");
    }
}