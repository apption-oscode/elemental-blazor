@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Elemental.Components
@inherits HtmlElement

<div class="@_classname" @attributes="InputAttributesWithoutClass">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {

    [Parameter]
    public bool Accordion { get; set; }

    [Parameter]
    public EventCallback<(AeCollapseSection Section, bool Open)> OnSectionToggled { get; set; }

    private string _classname => $"ae collapse {_inputClass}";

    public Dictionary<AeCollapseSection, bool> Sections = new Dictionary<AeCollapseSection, bool>();

    internal void AddSection(AeCollapseSection section)
    {
        var open = section.DefaultOpen;
        if(Accordion && open)
        {
            open = !Sections.Values.Any(s => s);
        }
        Sections.Add(section, open);
        StateHasChanged();
    }

    public async Task ToggleSection(AeCollapseSection section)
    {
        if(Accordion)
        {
            foreach(var s in Sections.Keys.ToList()){
              if(Sections[s] && s != section){
                Sections[s] = false;
              }
            }

        }

        Sections[section] = !Sections[section];

        await OnSectionToggled.InvokeAsync((section, Sections[section]));

        StateHasChanged();
    }
}